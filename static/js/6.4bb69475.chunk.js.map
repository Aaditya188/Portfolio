{"version":3,"sources":["components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/DecoderText/index.js","components/Section/index.js","components/Text/index.js"],"names":["Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","className","style","classNames","numToMs","defaultProps","TextArea","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","getComputedStyle","current","parseInt","paddingHeight","paddingTop","paddingBottom","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","500","404","getStatusError","Error","Section","Helmet","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","Text","size","secondary","iconHoverShift","href","children","align","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","glyphs","CharType","startDelay","output","container","reduceMotion","usePrefersReducedMotion","containerInstance","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","forwardRef"],"mappings":"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","file":"static/js/6.4bb69475.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '90px',\n  notchHeight: '10px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n","import { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TextArea.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from './TextArea';\nimport { useId } from 'hooks';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\nimport './index.css';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","import './index.css';\n\nimport classNames from 'classnames';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport Heading from 'components/Heading';\nimport Icon from 'components/Icon';\nimport Input from 'components/Input';\nimport Section from 'components/Section';\nimport Text from 'components/Text';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { useFormInput, useRouteTransition, useScrollRestore } from 'hooks';\nimport { useCallback, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToMs, numToPx } from 'utils/style';\nimport { isVisible, reflow } from 'utils/transition';\n\nconst initDelay = tokens.base.durationS;\n\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('https://api.hamishw.com/message', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Hamish Williams</title>\n        <meta\n          name=\"description\"\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <Heading\n                  level={3}\n                  as=\"h3\"\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </Heading>\n                <Text\n                  size=\"l\"\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days, sit tight\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n"],"sourceRoot":""}